{"ast":null,"code":"var _jsxFileName = \"/home/mithun/Countdown-Timer/src/App.js\";\n// import React from 'react'; \n// import tachyons from 'tachyons';\n// import './App.css';\n// // import {Image} from './components/timer Image/timer.jpeg';\n// class App extends React.Component{\n// constructor(){\n//     super();\n//     this.state ={\n//         items:[],\n//         input:'',\n//         current:new Date().toUTCString(),\n//         currentDate: new Date().toLocaleDateString(),\n//         updateDate:\"0 days\"\n//     }\n// }\n// getData=(e)=>{\n//     this.setState({input:e.target.value})\n// }\n// updateDate=()=>{\n//     if(this.state.updateDate===null || this.state.input=== ''){\n//         alert('please enter valid date');\n//     }else{\n//          let diff= new Date(this.state.input)-new Date();\n//          let days = Math.floor(diff/1000*60*60*24);\n//         let intervalX= setInterval(()=>{\n//             let diff= new Date(this.state.input)-new Date();\n//             let days = Math.floor(diff/(1000*60*60*24))\n//             let hours = Math.floor(diff % (1000*60*60*24)/1000*60*60)\n//             let minutes = Math.floor(diff % (1000*60*60)/1000*60)\n//             let seconds = Math.floor(diff % (1000*60)/1000)\n//             this.setState({updateDate:`${days} d : ${hours} h : ${minutes} m : ${seconds} s`})\n//             if (diff < 0) {\n//                 clearInterval(intervalX);\n//                 this.setState({ updatedDate: \"Expire Date/CountDown\" })\n//               }\n//         },1000)\n//         const item = { date: this.state.input, days: days };\n//         this.setState({ items: this.state.items.concat(item) });\n//         console.log(this.state.items)\n//     }\n// }\n// render(){\n//     return(\n//     <div>\n//         <div className=\"App\">\n//             <div className=\"card__layout\">\n//             <h2 className=\"card__heading\">{this.state.current}</h2>\n//             <h2 className=\"card__heading\">{this.state.updatedDate}</h2>\n//             <input value={this.state.input} onChange={this.getData} className=\"card__input\" type=\"date\" required className=\"card__input\" /><br />\n//             <button onClick={this.updateDate} className='card__btn'>Submit</button>\n//             <div className=\"history__container\">\n//               <h3 className=\"history__heading\">History</h3>\n//               {\n//                 this.state.items.length > 0 ?\n//                   this.state.items.map((item, i) => {\n//                     return (\n//                       <div className=\"history__ptag\" key={i}><p className=\"start\">{item.date}</p><p className='end'>{item.days}</p></div>\n//                     )\n//                   }) : <p></p>}\n//             </div>\n//             </div>\n//         </div>\n//     </div>\n//     )\n// }\n// }\n// export default App;\nimport './App.css';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getData = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n\n    this.updateDate = () => {\n      if (this.state.updatedDate === null || this.state.input === '') {\n        //  this.setState({ updatedDate: '0 day' })\n        alert(\"enter valid date\");\n      } else {\n        let diff = new Date(this.state.input) - new Date();\n        let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        let x = setInterval(() => {\n          let diff = new Date(this.state.input) - new Date();\n          let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n          let hours = Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n          let minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n          let seconds = Math.floor(diff % (1000 * 60) / 1000);\n          this.setState({\n            updatedDate: `${days} d : ${hours} h :${minutes} m : ${seconds} s`\n          });\n\n          if (diff < 0) {\n            clearInterval(x);\n            this.setState({\n              updatedDate: \"Expire Date/CountDown\"\n            });\n          }\n        }, 1000);\n        const item = {\n          date: this.state.input,\n          days: days\n        };\n        this.setState({\n          items: this.state.items.concat(item)\n        });\n        console.log(this.state.items); //    console.log(this.state.updatedDate);\n      }\n    };\n\n    this.state = {\n      items: [],\n      input: '',\n      current: new Date().toUTCString(),\n      currentdate: new Date().toLocaleDateString(),\n      updatedDate: '0 day'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card__layout\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"card__heading\",\n            children: this.state.current\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"card__heading\",\n            children: this.state.updatedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.input,\n            onChange: this.getData,\n            className: \"card__input\",\n            type: \"date\",\n            required: true,\n            className: \"card__input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 140\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.updateDate,\n            className: \"card__btn\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"history__container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"history__heading\",\n              children: \"History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this), this.state.items.length > 0 ? this.state.items.map((item, i) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"history__ptag\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"start\",\n                  children: item.date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 62\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"end\",\n                  children: item.days\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 98\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 23\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 24\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mithun/Countdown-Timer/src/App.js"],"names":["React","Component","App","constructor","getData","e","setState","input","target","value","updateDate","state","updatedDate","alert","diff","Date","days","Math","floor","x","setInterval","hours","minutes","seconds","clearInterval","item","date","items","concat","console","log","current","toUTCString","currentdate","toLocaleDateString","render","length","map","i"],"mappings":"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","sourcesContent":["// import React from 'react'; \n// import tachyons from 'tachyons';\n// import './App.css';\n// // import {Image} from './components/timer Image/timer.jpeg';\n\n\n// class App extends React.Component{\n// constructor(){\n//     super();\n//     this.state ={\n//         items:[],\n//         input:'',\n//         current:new Date().toUTCString(),\n//         currentDate: new Date().toLocaleDateString(),\n//         updateDate:\"0 days\"\n\n//     }\n// }\n// getData=(e)=>{\n//     this.setState({input:e.target.value})\n// }\n\n// updateDate=()=>{\n//     if(this.state.updateDate===null || this.state.input=== ''){\n//         alert('please enter valid date');\n//     }else{\n//          let diff= new Date(this.state.input)-new Date();\n//          let days = Math.floor(diff/1000*60*60*24);\n//         let intervalX= setInterval(()=>{\n//             let diff= new Date(this.state.input)-new Date();\n//             let days = Math.floor(diff/(1000*60*60*24))\n//             let hours = Math.floor(diff % (1000*60*60*24)/1000*60*60)\n//             let minutes = Math.floor(diff % (1000*60*60)/1000*60)\n//             let seconds = Math.floor(diff % (1000*60)/1000)\n\n//             this.setState({updateDate:`${days} d : ${hours} h : ${minutes} m : ${seconds} s`})\n//             if (diff < 0) {\n//                 clearInterval(intervalX);\n//                 this.setState({ updatedDate: \"Expire Date/CountDown\" })\n//               }\n\n\n//         },1000)\n//         const item = { date: this.state.input, days: days };\n//         this.setState({ items: this.state.items.concat(item) });\n//         console.log(this.state.items)\n       \n//     }\n// }\n// render(){\n//     return(\n//     <div>\n            \n//         <div className=\"App\">\n//             <div className=\"card__layout\">\n//             <h2 className=\"card__heading\">{this.state.current}</h2>\n//             <h2 className=\"card__heading\">{this.state.updatedDate}</h2>\n\n//             <input value={this.state.input} onChange={this.getData} className=\"card__input\" type=\"date\" required className=\"card__input\" /><br />\n//             <button onClick={this.updateDate} className='card__btn'>Submit</button>\n//             <div className=\"history__container\">\n//               <h3 className=\"history__heading\">History</h3>\n//               {\n//                 this.state.items.length > 0 ?\n//                   this.state.items.map((item, i) => {\n//                     return (\n//                       <div className=\"history__ptag\" key={i}><p className=\"start\">{item.date}</p><p className='end'>{item.days}</p></div>\n//                     )\n//                   }) : <p></p>}\n//             </div>\n//             </div>\n//         </div>\n//     </div>\n//     )\n// }\n// }\n// export default App;\nimport './App.css';\nimport React, { Component } from 'react'\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      input: '',\n      current: new Date().toUTCString(),\n      currentdate: new Date().toLocaleDateString(),\n      updatedDate: '0 day'\n    }\n  }\n\n  getData = e => {\n    this.setState({ input: e.target.value })\n  }\n  updateDate = () => {\n    if (this.state.updatedDate === null || this.state.input === '') {\n      //  this.setState({ updatedDate: '0 day' })\n      alert(\"enter valid date\")\n    }\n    else {\n      \n      let diff = new Date(this.state.input) - new Date();\n      let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n      \n      let x = setInterval(() => {\n        \n        let diff = new Date(this.state.input) - new Date();\n        let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n        let seconds = Math.floor((diff % (1000 * 60)) / 1000);\n        \n        this.setState({ updatedDate: `${days} d : ${hours} h :${minutes} m : ${seconds} s` });\n        if (diff < 0) {\n          clearInterval(x);\n          this.setState({ updatedDate: \"Expire Date/CountDown\" })\n        }\n        \n      }, 1000);\n      const item = { date: this.state.input, days: days };\n      this.setState({ items: this.state.items.concat(item) });\n      console.log(this.state.items)\n      //    console.log(this.state.updatedDate);\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <div className=\"card__layout\">\n            <h2 className=\"card__heading\">{this.state.current}</h2>\n            <h2 className=\"card__heading\">{this.state.updatedDate}</h2>\n\n            <input value={this.state.input} onChange={this.getData} className=\"card__input\" type=\"date\" required className=\"card__input\" /><br />\n            <button onClick={this.updateDate} className='card__btn'>Submit</button>\n            <div className=\"history__container\">\n              <h3 className=\"history__heading\">History</h3>\n              {\n                this.state.items.length > 0 ?\n                  this.state.items.map((item, i) => {\n                    return (\n                      <div className=\"history__ptag\" key={i}><p className=\"start\">{item.date}</p><p className='end'>{item.days}</p></div>\n                    )\n                  }) : <p></p>}\n            </div>\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}