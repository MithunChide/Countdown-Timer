{"ast":null,"code":"var _jsxFileName = \"/home/mithun/Countdown-Timer/src/App.js\";\n// import tachyons from 'tachyons';\nimport './App.css';\nimport React, { Component } from 'react';\nimport tachyons from 'tachyons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getData = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n\n    this.updateDate = () => {\n      if (this.state.updatedDate === null || this.state.input === '') {\n        //  this.setState({ updatedDate: '0 day' })\n        alert(\"enter valid date\");\n      } else {\n        //let diff = new Date(this.state.input) - new Date();\n        //let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        let x = setInterval(() => {\n          let diff = new Date(this.state.input) - new Date();\n          let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n          let hours = Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n          let minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n          let seconds = Math.floor(diff % (1000 * 60) / 1000);\n          this.setState({\n            updatedDate: `${days} D : ${hours} H :${minutes} M : ${seconds} S`\n          });\n\n          if (diff < 0) {\n            clearInterval(x);\n            this.setState({\n              updatedDate: \"Expire Date/CountDown\"\n            });\n          }\n        }, 1000); //   const item = { date: this.state.input, days: days };\n        //   this.setState({ items: this.state.items.concat(item) });\n        //   console.log(this.state.items)\n        //    console.log(this.state.updatedDate);\n      }\n    };\n\n    this.state = {\n      items: [],\n      input: '',\n      current: new Date().toUTCString(),\n      currentdate: new Date().toLocaleDateString(),\n      updatedDate: '0 day'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card__layout\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"card__heading\",\n            children: this.state.current\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"card__heading\",\n            children: this.state.updatedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.input,\n            onChange: this.getData,\n            className: \"card__input\",\n            type: \"date\",\n            required: true,\n            className: \"card__input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 140\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.updateDate,\n            className: \"card__btn\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mithun/Countdown-Timer/src/App.js"],"names":["React","Component","tachyons","App","constructor","getData","e","setState","input","target","value","updateDate","state","updatedDate","alert","x","setInterval","diff","Date","days","Math","floor","hours","minutes","seconds","clearInterval","items","current","toUTCString","currentdate","toLocaleDateString","render"],"mappings":"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","sourcesContent":[" \n// import tachyons from 'tachyons';\n\nimport './App.css';\nimport React, { Component } from 'react'\n import tachyons from 'tachyons';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      input: '',\n      current: new Date().toUTCString(),\n      currentdate: new Date().toLocaleDateString(),\n      updatedDate: '0 day'\n    }\n  }\n\n  getData = e => {\n    this.setState({ input: e.target.value })\n  }\n  updateDate = () => {\n    if (this.state.updatedDate === null || this.state.input === '') {\n      //  this.setState({ updatedDate: '0 day' })\n      alert(\"enter valid date\")\n    }\n    else {\n      \n      //let diff = new Date(this.state.input) - new Date();\n      //let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n      \n      let x = setInterval(() => {\n        \n        let diff = new Date(this.state.input) - new Date();\n        let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n        let seconds = Math.floor((diff % (1000 * 60)) / 1000);\n        \n        this.setState({ updatedDate: `${days} D : ${hours} H :${minutes} M : ${seconds} S` });\n        if (diff < 0) {\n          clearInterval(x);\n          this.setState({ updatedDate: \"Expire Date/CountDown\" })\n        }\n        \n      }, 1000);\n    //   const item = { date: this.state.input, days: days };\n    //   this.setState({ items: this.state.items.concat(item) });\n    //   console.log(this.state.items)\n      //    console.log(this.state.updatedDate);\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <div className=\"card__layout\">\n            <h2 className=\"card__heading\">{this.state.current}</h2>\n            <h2 className=\"card__heading\">{this.state.updatedDate}</h2>\n\n            <input value={this.state.input} onChange={this.getData} className=\"card__input\" type=\"date\" required className=\"card__input\" /><br />\n            <button onClick={this.updateDate} className='card__btn'>Submit</button>\n            {/* <div className=\"history__container\">\n              <h3 className=\"history__heading\">History</h3>\n              {\n                this.state.items.length > 0 ?\n                  this.state.items.map((item, i) => {\n                    return (\n                      <div className=\"history__ptag\" key={i}><p className=\"start\">{item.date}</p><p className='end'>{item.days}</p></div>\n                    )\n                  }) : <p></p>}\n            </div> */}\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}