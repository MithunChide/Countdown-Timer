{"ast":null,"code":"var _jsxFileName = \"/home/mithun/Countdown-Timer/src/App.js\";\nimport React from 'react';\nimport tachyons from 'tachyons';\nimport './App.css'; // import {Image} from './components/timer Image/timer.jpeg';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getData = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n\n    this.updateDate = () => {\n      if (this.state.updateDate === null || this.state.input === '') {\n        alert('please enter valid date');\n      } else {\n        let diff = new Date(this.state.input) - new Date(); // let days = Math.floor(diff/1000*60*60*24);\n\n        let intervalX = setInterval(() => {\n          let diff = new Date(this.state.input) - new Date();\n          let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n          let hours = Math.floor(diff % (1000 * 60 * 60 * 24) / 1000 * 60 * 60);\n          let minutes = Math.floor(diff % (1000 * 60 * 60) / 1000 * 60);\n          let seconds = Math.floor(diff % (1000 * 60) / 1000);\n          this.setState({\n            updateDate: `${days} d : ${hours} h : ${minutes} m : ${seconds} s`\n          });\n        }, 1000);\n\n        if (diff < 0) {\n          clearInterval(intervalX);\n          this.setState({\n            updatedDate: \"Expire Date/CountDown\"\n          });\n        }\n      }\n    };\n\n    this.state = {\n      input: '',\n      current: new Date().toUTCString(),\n      currentDate: new Date().toLocaleDateString(),\n      updateDate: \"0 days\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card__layout\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"card__heading\",\n            children: this.state.current\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"card__heading\",\n            children: this.state.updatedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.input,\n            onChange: this.getData,\n            className: \"card__input\",\n            type: \"date\",\n            required: true,\n            className: \"card__input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 140\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.updateDate,\n            className: \"card__btn\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"history__container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"history__heading\",\n              children: \"History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this), this.state.items.length > 0 ? this.state.items.map((item, i) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"history__ptag\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"start\",\n                  children: item.date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 62\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"end\",\n                  children: item.days\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 98\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 23\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 24\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mithun/Countdown-Timer/src/App.js"],"names":["React","tachyons","App","Component","constructor","getData","e","setState","input","target","value","updateDate","state","alert","diff","Date","intervalX","setInterval","days","Math","floor","hours","minutes","seconds","clearInterval","updatedDate","current","toUTCString","currentDate","toLocaleDateString","render","items","length","map","item","i","date"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAO,WAAP,C,CACA;;;;AAGA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAiC;AACjCC,EAAAA,WAAW,GAAE;AACT;;AADS,SAUbC,OAVa,GAUJC,CAAD,IAAK;AACT,WAAKC,QAAL,CAAc;AAACC,QAAAA,KAAK,EAACF,CAAC,CAACG,MAAF,CAASC;AAAhB,OAAd;AACH,KAZY;;AAAA,SAcbC,UAda,GAcF,MAAI;AACX,UAAG,KAAKC,KAAL,CAAWD,UAAX,KAAwB,IAAxB,IAAgC,KAAKC,KAAL,CAAWJ,KAAX,KAAoB,EAAvD,EAA0D;AACtDK,QAAAA,KAAK,CAAC,yBAAD,CAAL;AACH,OAFD,MAEK;AACD,YAAIC,IAAI,GAAE,IAAIC,IAAJ,CAAS,KAAKH,KAAL,CAAWJ,KAApB,IAA2B,IAAIO,IAAJ,EAArC,CADC,CAED;;AACA,YAAIC,SAAS,GAAEC,WAAW,CAAC,MAAI;AAC3B,cAAIH,IAAI,GAAE,IAAIC,IAAJ,CAAS,KAAKH,KAAL,CAAWJ,KAApB,IAA2B,IAAIO,IAAJ,EAArC;AACA,cAAIG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,IAAE,OAAK,EAAL,GAAQ,EAAR,GAAW,EAAb,CAAf,CAAX;AACA,cAAIO,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAWN,IAAI,IAAI,OAAK,EAAL,GAAQ,EAAR,GAAW,EAAf,CAAJ,GAAuB,IAAvB,GAA4B,EAA5B,GAA+B,EAA1C,CAAZ;AACA,cAAIQ,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAWN,IAAI,IAAI,OAAK,EAAL,GAAQ,EAAZ,CAAJ,GAAoB,IAApB,GAAyB,EAApC,CAAd;AACA,cAAIS,OAAO,GAAGJ,IAAI,CAACC,KAAL,CAAWN,IAAI,IAAI,OAAK,EAAT,CAAJ,GAAiB,IAA5B,CAAd;AAEA,eAAKP,QAAL,CAAc;AAACI,YAAAA,UAAU,EAAE,GAAEO,IAAK,QAAOG,KAAM,QAAOC,OAAQ,QAAOC,OAAQ;AAA/D,WAAd;AAGH,SAVyB,EAUxB,IAVwB,CAA1B;;AAWA,YAAIT,IAAI,GAAG,CAAX,EAAc;AACVU,UAAAA,aAAa,CAACR,SAAD,CAAb;AACA,eAAKT,QAAL,CAAc;AAAEkB,YAAAA,WAAW,EAAE;AAAf,WAAd;AACD;AACN;AACJ,KApCY;;AAET,SAAKb,KAAL,GAAY;AACRJ,MAAAA,KAAK,EAAC,EADE;AAERkB,MAAAA,OAAO,EAAC,IAAIX,IAAJ,GAAWY,WAAX,EAFA;AAGRC,MAAAA,WAAW,EAAE,IAAIb,IAAJ,GAAWc,kBAAX,EAHL;AAIRlB,MAAAA,UAAU,EAAC;AAJH,KAAZ;AAOH;;AA4BDmB,EAAAA,MAAM,GAAE;AACJ,wBACA;AAAA,6BAEI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACA;AAAI,YAAA,SAAS,EAAC,eAAd;AAAA,sBAA+B,KAAKlB,KAAL,CAAWc;AAA1C;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAI,YAAA,SAAS,EAAC,eAAd;AAAA,sBAA+B,KAAKd,KAAL,CAAWa;AAA1C;AAAA;AAAA;AAAA;AAAA,kBAFA,eAIA;AAAO,YAAA,KAAK,EAAE,KAAKb,KAAL,CAAWJ,KAAzB;AAAgC,YAAA,QAAQ,EAAE,KAAKH,OAA/C;AAAwD,YAAA,SAAS,EAAC,aAAlE;AAAgF,YAAA,IAAI,EAAC,MAArF;AAA4F,YAAA,QAAQ,MAApG;AAAqG,YAAA,SAAS,EAAC;AAA/G;AAAA;AAAA;AAAA;AAAA,kBAJA,eAI+H;AAAA;AAAA;AAAA;AAAA,kBAJ/H,eAKA;AAAQ,YAAA,OAAO,EAAE,KAAKM,UAAtB;AAAkC,YAAA,SAAS,EAAC,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALA,eAMA;AAAK,YAAA,SAAS,EAAC,oBAAf;AAAA,oCACE;AAAI,cAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAGI,KAAKC,KAAL,CAAWmB,KAAX,CAAiBC,MAAjB,GAA0B,CAA1B,GACE,KAAKpB,KAAL,CAAWmB,KAAX,CAAiBE,GAAjB,CAAqB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAChC,kCACE;AAAK,gBAAA,SAAS,EAAC,eAAf;AAAA,wCAAuC;AAAG,kBAAA,SAAS,EAAC,OAAb;AAAA,4BAAsBD,IAAI,CAACE;AAA3B;AAAA;AAAA;AAAA;AAAA,wBAAvC,eAA2E;AAAG,kBAAA,SAAS,EAAC,KAAb;AAAA,4BAAoBF,IAAI,CAAChB;AAAzB;AAAA;AAAA;AAAA;AAAA,wBAA3E;AAAA,iBAAoCiB,CAApC;AAAA;AAAA;AAAA;AAAA,sBADF;AAGD,aAJD,CADF,gBAKO;AAAA;AAAA;AAAA;AAAA,oBARX;AAAA;AAAA;AAAA;AAAA;AAAA,kBANA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADA;AAwBH;;AA/DgC;;AAiEjC,eAAejC,GAAf","sourcesContent":["import React from 'react'; \nimport tachyons from 'tachyons';\nimport './App.css';\n// import {Image} from './components/timer Image/timer.jpeg';\n\n\nclass App extends React.Component{\nconstructor(){\n    super();\n    this.state ={\n        input:'',\n        current:new Date().toUTCString(),\n        currentDate: new Date().toLocaleDateString(),\n        updateDate:\"0 days\"\n\n    }\n}\ngetData=(e)=>{\n    this.setState({input:e.target.value})\n}\n\nupdateDate=()=>{\n    if(this.state.updateDate===null || this.state.input=== ''){\n        alert('please enter valid date');\n    }else{\n        let diff= new Date(this.state.input)-new Date();\n        // let days = Math.floor(diff/1000*60*60*24);\n        let intervalX= setInterval(()=>{\n            let diff= new Date(this.state.input)-new Date();\n            let days = Math.floor(diff/(1000*60*60*24))\n            let hours = Math.floor(diff % (1000*60*60*24)/1000*60*60)\n            let minutes = Math.floor(diff % (1000*60*60)/1000*60)\n            let seconds = Math.floor(diff % (1000*60)/1000)\n\n            this.setState({updateDate:`${days} d : ${hours} h : ${minutes} m : ${seconds} s`})\n\n\n        },1000)\n        if (diff < 0) {\n            clearInterval(intervalX);\n            this.setState({ updatedDate: \"Expire Date/CountDown\" })\n          }\n    }\n}\nrender(){\n    return(\n    <div>\n            \n        <div className=\"App\">\n            <div className=\"card__layout\">\n            <h2 className=\"card__heading\">{this.state.current}</h2>\n            <h2 className=\"card__heading\">{this.state.updatedDate}</h2>\n\n            <input value={this.state.input} onChange={this.getData} className=\"card__input\" type=\"date\" required className=\"card__input\" /><br />\n            <button onClick={this.updateDate} className='card__btn'>Submit</button>\n            <div className=\"history__container\">\n              <h3 className=\"history__heading\">History</h3>\n              {\n                this.state.items.length > 0 ?\n                  this.state.items.map((item, i) => {\n                    return (\n                      <div className=\"history__ptag\" key={i}><p className=\"start\">{item.date}</p><p className='end'>{item.days}</p></div>\n                    )\n                  }) : <p></p>}\n            </div>\n            </div>\n        </div>\n    </div>\n    )\n}\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}